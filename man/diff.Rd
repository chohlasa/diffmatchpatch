% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{diff_make}
\alias{diff_make}
\alias{diff_levenshtein}
\alias{diff_to_delta}
\alias{diff_from_delta}
\alias{diff_to_html}
\alias{diff_to_patch}
\alias{diff_text_source}
\alias{diff_text_dest}
\title{Compute diffs between text strings}
\usage{
diff_make(x, y, cleanup = "semantic", checklines = TRUE)

diff_levenshtein(diff)

diff_to_delta(diff)

diff_from_delta(x, delta)

diff_to_html(diff)

diff_to_patch(diff)

diff_text_source(diff)

diff_text_dest(diff)
}
\arguments{
\item{x}{The source string}

\item{y}{The destination string}

\item{cleanup}{Determines the cleanup method applied to the diffs. Allowed values include:
\code{semantic}, \code{lossless}, \code{efficiency}, \code{merge} and \code{none}. See Details for the behavior of each of these.}

\item{checklines}{Performance flag - if \code{FALSE}, then don't run a
line-level diff first to identify the changed areas.
If \code{TRUE}, run a faster slightly less optimal diff. Default: \code{TRUE}.}

\item{diff}{A \code{diff_df} data frame contains a diff.}

\item{delta}{A delta string.}
}
\value{
\code{diff_make()} returns a \code{diff_df} data frame containing the diffs.

\code{diff_make()} returns an integer.

\code{diff_to_delta()} returns an character string.

\code{diff_from_delta()} returns a \code{diff_df} data frame.

\code{diff_to_html()} returns a character string.

\code{diff_to_patch()} returns a character string.

\code{diff_text_source()} returns a character string.

\code{diff_text_dest()} returns a character string.
}
\description{
\code{diff_make()} computes character level diffs between the source string (\code{x}) and
destination string (\code{y}).

\code{diff_levenshtein()} calculates the Levenshtein distance of a diff.

\code{diff_to_delta()} converts a diff to a delta string.

\code{diff_from_delta()} creates a diff from a source string (\code{x}) and a \code{delta} string.

\code{diff_to_html()} converts a diff to pretty HTML.

\code{diff_to_patch()} converts a diff to a patch string.

\code{diff_text_source()} recovers the source string from a diff.

\code{diff_text_dest()} recovers the destination string from a diff.
}
\details{
\subsection{Cleanup methods}{
\itemize{
\item \code{semantic} - Reduce the number of edits by eliminating semantically trivial equalities.
\item semantic \code{lossless} - Look for single edits surrounded on both sides by equalities
which can be shifted sideways to align the edit to a word boundary.
e.g: The c\strong{at c}ame. -> The **cat **came.
\item \code{efficiency} - Reduce the number of edits by eliminating operationally trivial equalities.
\item \code{merge} - Reorder and merge like edit sections.  Merge equalities.
Any edit section can move as long as it doesn't cross an equality.
\item \code{none} - Do not apply any cleanup methods to the diffs.
}
}
}
